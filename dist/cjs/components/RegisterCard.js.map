{"version":3,"sources":["../../../src/components/RegisterCard.tsx"],"sourcesContent":["\"use client\";\r\nimport { Button } from \"./ui/button\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardContent,\r\n} from \"./ui/card\";\r\n\r\nimport { Input } from \"./ui/input\";\r\nimport { Label } from \"./ui/label\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { registerUser, sendCode, verifyCode } from \"../actions/register\";\r\nimport { checkPassword } from \"../actions/check\";\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport default function RegisterCard({\r\n  project_name,\r\n  project_id,\r\n}: {\r\n  project_name: string;\r\n  project_id: string;\r\n}) {\r\n  const [formCount, setFormCount] = useState<1 | 2 | 3>(1);\r\n  const [email, setEmail] = useState<string>(\"\");\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"redshield-dark:bg-gray-900/20 redshield-bg-white redshield-px-2 redshield-h-auto redshield-shadow-lg redshield-rounded-none\">\r\n        <CardHeader>\r\n          <CardTitle>Register to {project_name}</CardTitle>\r\n          <CardDescription>redis based auth</CardDescription>\r\n        </CardHeader>\r\n        {formCount === 1 ? (\r\n          <Form1 setFormCount={setFormCount} setEmail={setEmail} />\r\n        ) : formCount === 2 ? (\r\n          <Form2 setFormCount={setFormCount} email={email} />\r\n        ) : (\r\n          <Form3 email={email} project_id={project_id} />\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Form1 = ({\r\n  setFormCount,\r\n  setEmail,\r\n}: {\r\n  setFormCount: Dispatch<SetStateAction<1 | 2 | 3>>;\r\n  setEmail: Dispatch<SetStateAction<string>>;\r\n}) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const sendData = async (formData: FormData) => {\r\n    const mail = formData.get(\"email\") as string;\r\n    await fakeLoad();\r\n    setLoading(true);\r\n    const res = await sendCode({ email: mail });\r\n    if (res.status) {\r\n      toast.success(res.message);\r\n      setEmail(mail);\r\n      setFormCount(2);\r\n    } else {\r\n      toast.error(res.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <>\r\n      <form action={sendData}>\r\n        <CardContent>\r\n          <Label htmlFor=\"email\">Email</Label>\r\n          <Input\r\n            className=\"redshield-rounded-none\"\r\n            required\r\n            id=\"email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"enter your email\"\r\n          />\r\n        </CardContent>\r\n        <CardFooter>\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            className=\"redshield-w-full redshield-rounded-none\"\r\n          >\r\n            {loading ? (\r\n              <Loader2 className=\"redshield-animate-[spin_0.4s_linear_infinite] redshield-w-[27px] redshield-h-[27px]\" />\r\n            ) : (\r\n              \"continue\"\r\n            )}\r\n          </Button>\r\n        </CardFooter>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Form2 = ({\r\n  setFormCount,\r\n  email,\r\n}: {\r\n  setFormCount: Dispatch<SetStateAction<1 | 2 | 3>>;\r\n  email: string;\r\n}) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const sendData = async (formData: FormData) => {\r\n    const code = formData.get(\"code\") as string;\r\n    await fakeLoad();\r\n    setLoading(true);\r\n    const res = await verifyCode({ code: code, email: email });\r\n    if (res.status) {\r\n      toast.success(res.message);\r\n      setFormCount(3);\r\n    } else {\r\n      toast.error(res.message);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <>\r\n      <form action={sendData}>\r\n        <CardContent className=\"redshield-flex redshield-flex-col redshield-gap-3\">\r\n          <p className=\"redshield-text-sm redshield-text-slate-400 redshield-dark:text-slate-500\">\r\n            enter the code sent to <br />\r\n            <span className=\"redshield-text-slate-700 redshield-dark:text-slate-300\">\r\n              {email}\r\n            </span>{\" \"}\r\n          </p>\r\n          <Input\r\n            className=\"redshield-rounded-none\"\r\n            name=\"code\"\r\n            type=\"text\"\r\n            required\r\n            placeholder=\"enter code\"\r\n          />\r\n        </CardContent>\r\n        <CardFooter className=\"redshield-flex redshield-gap-3\">\r\n          <Button\r\n            onClick={() => setFormCount(1)}\r\n            type=\"button\"\r\n            className=\"redshield-w-[50%] redshield-rounded-none\"\r\n            variant={\"outline\"}\r\n          >\r\n            back\r\n          </Button>\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            className=\"redshield-w-[50%] redshield-rounded-none\"\r\n          >\r\n            {loading ? (\r\n              <Loader2 className=\"redshield-animate-[spin_0.4s_linear_infinite] redshield-w-[27px] redshield-h-[27px]\" />\r\n            ) : (\r\n              \"submit\"\r\n            )}\r\n          </Button>\r\n        </CardFooter>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Form3 = ({\r\n  email,\r\n  project_id,\r\n}: {\r\n  email: string;\r\n  project_id: string;\r\n}) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const router = useRouter();\r\n\r\n  const createUser = async (formData: FormData) => {\r\n    const pass = formData.get(\"pass\") as string;\r\n    const confirmPass = formData.get(\"confirm\") as string;\r\n    if (pass === confirmPass) {\r\n      const validation = await checkPassword({ password: pass });\r\n      if (validation.status) {\r\n        setLoading(true);\r\n\r\n        const res = await registerUser({\r\n          email: email,\r\n          password: pass,\r\n          project_id: project_id,\r\n        });\r\n        if (res.status) {\r\n          toast.success(res.message);\r\n          router.push(\"/\");\r\n        } else {\r\n          toast.error(res.message);\r\n        }\r\n        setLoading(false);\r\n      } else {\r\n        toast.error(validation.message);\r\n      }\r\n    } else {\r\n      toast.error(\"password does not match\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form action={createUser}>\r\n        <CardContent className=\"redshield-flex redshield-flex-col redshield-gap-3\">\r\n          <Label htmlFor=\"pass\">Password</Label>\r\n          <Input\r\n            className=\"redshield-rounded-none\"\r\n            name=\"pass\"\r\n            id=\"pass\"\r\n            type=\"password\"\r\n          />\r\n          <Label htmlFor=\"confirm\">Confirm Password</Label>\r\n          <Input\r\n            className=\"redshield-rounded-none\"\r\n            name=\"confirm\"\r\n            id=\"confirm\"\r\n            type=\"password\"\r\n          />\r\n        </CardContent>\r\n        <CardFooter>\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            className=\"redshield-w-full redshield-rounded-none\"\r\n          >\r\n            {loading ? (\r\n              <Loader2 className=\"redshield-animate-[spin_0.4s_linear_infinite] redshield-w-[27px] redshield-h-[27px]\" />\r\n            ) : (\r\n              \"create account\"\r\n            )}\r\n          </Button>\r\n        </CardFooter>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n//fake loading\r\nconst fakeLoad = async () => {\r\n  return;\r\n};\r\n"],"mappings":"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","names":["React"]}