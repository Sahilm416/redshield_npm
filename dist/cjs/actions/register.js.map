{"version":3,"sources":["../../../src/actions/register.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { getEnv } from \"./auth\";\r\nimport { LoginUser } from \"./login\";\r\n\r\nexport const sendCode = async ({ email }: { email: string }) => {\r\n  const key = await getEnv();\r\n  try {\r\n    const exist = await fetch(\r\n      \"https://redshield.vercel.app/api/service/exist\",\r\n      {\r\n        method: \"POST\",\r\n        cache: \"no-store\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: key,\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n        }),\r\n      }\r\n    );\r\n\r\n    const existResponse = await exist.json();\r\n\r\n    if (!existResponse.status) {\r\n      return {\r\n        status: false,\r\n        message: existResponse.message,\r\n      };\r\n    }\r\n\r\n    await fetch(\"https://redshield.vercel.app/api/service/sendCode\", {\r\n      method: \"POST\",\r\n      cache: \"no-store\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: key,\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n      }),\r\n    });\r\n\r\n    return {\r\n      status: true,\r\n      message: \"email sent successfully\",\r\n    };\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return {\r\n      status: false,\r\n      message: \"error sending email\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const verifyCode = async ({\r\n  code,\r\n  email,\r\n}: {\r\n  code: string;\r\n  email: string;\r\n}) => {\r\n  const key = await getEnv();\r\n  try {\r\n    const res = await fetch(\r\n      \"https://redshield.vercel.app/api/service/verifyCode\",\r\n      {\r\n        method: \"POST\",\r\n        cache: \"no-store\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: key,\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          code: code,\r\n        }),\r\n      }\r\n    );\r\n\r\n    const response = await res.json();\r\n    return {\r\n      status: response.status,\r\n      message: response.message,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return {\r\n      status: false,\r\n      message: \"something went wrong\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const registerUser = async (data: {\r\n  email: string;\r\n  password: string;\r\n  project_id: string;\r\n  profile_picture?: string;\r\n}) => {\r\n  const key = await getEnv();\r\n  try {\r\n    const res = await fetch(\r\n      \"https://redshield.vercel.app/api/service/register\",\r\n      {\r\n        method: \"POST\",\r\n        cache: \"no-store\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: key,\r\n        },\r\n        body: JSON.stringify({\r\n          email: data.email,\r\n          password: data.password,\r\n          project_id: data.project_id,\r\n        }),\r\n      }\r\n    );\r\n\r\n    const response = await res.json();\r\n    if (response.status) {\r\n      await LoginUser({\r\n        email: data.email,\r\n        password: data.password,\r\n        project_id: data.project_id,\r\n      });\r\n    }\r\n    return {\r\n      status: response.status,\r\n      message: response.message,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return {\r\n      status: false,\r\n      message: \"something went wrong\",\r\n    };\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kBAAuB;AACvB,mBAA0B;AAEnB,MAAM,WAAW,OAAO,EAAE,MAAM,MAAyB;AAC9D,QAAM,MAAM,UAAM,oBAAO;AACzB,MAAI;AACF,UAAM,QAAQ,MAAM;AAAA,MAClB;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,eAAe;AAAA,QACjB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,gBAAgB,MAAM,MAAM,KAAK;AAEvC,QAAI,CAAC,cAAc,QAAQ;AACzB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,SAAS,cAAc;AAAA,MACzB;AAAA,IACF;AAEA,UAAM,MAAM,qDAAqD;AAAA,MAC/D,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe;AAAA,MACjB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,IAAI,SAAS,KAAK;AAC1B,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEO,MAAM,aAAa,OAAO;AAAA,EAC/B;AAAA,EACA;AACF,MAGM;AACJ,QAAM,MAAM,UAAM,oBAAO;AACzB,MAAI;AACF,UAAM,MAAM,MAAM;AAAA,MAChB;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,eAAe;AAAA,QACjB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,IAAI,KAAK;AAChC,WAAO;AAAA,MACL,QAAQ,SAAS;AAAA,MACjB,SAAS,SAAS;AAAA,IACpB;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,IAAI,KAAK;AACjB,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEO,MAAM,eAAe,OAAO,SAK7B;AACJ,QAAM,MAAM,UAAM,oBAAO;AACzB,MAAI;AACF,UAAM,MAAM,MAAM;AAAA,MAChB;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,eAAe;AAAA,QACjB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO,KAAK;AAAA,UACZ,UAAU,KAAK;AAAA,UACf,YAAY,KAAK;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,IAAI,KAAK;AAChC,QAAI,SAAS,QAAQ;AACnB,gBAAM,wBAAU;AAAA,QACd,OAAO,KAAK;AAAA,QACZ,UAAU,KAAK;AAAA,QACf,YAAY,KAAK;AAAA,MACnB,CAAC;AAAA,IACH;AACA,WAAO;AAAA,MACL,QAAQ,SAAS;AAAA,MACjB,SAAS,SAAS;AAAA,IACpB;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,IAAI,KAAK;AACjB,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AACF;","names":[]}