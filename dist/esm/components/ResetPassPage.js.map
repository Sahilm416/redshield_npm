{"version":3,"sources":["../../../src/components/ResetPassPage.tsx"],"sourcesContent":["\"use client\";\r\nimport \"../output.css\";\r\n\r\nimport {\r\n  CardTitle,\r\n  CardHeader,\r\n  CardContent,\r\n  CardFooter,\r\n  Card,\r\n} from \"./ui/card\";\r\nimport { Label } from \"./ui/label\";\r\nimport { Input } from \"./ui/input\";\r\nimport { Button } from \"./ui/button\";\r\nimport { checkPassword } from \"../actions/check\";\r\nimport { Toaster, toast } from \"sonner\";\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport React from \"react\";\r\nimport { changePassword } from \"../actions/forgotPassword\";\r\nimport { Loader2 } from \"lucide-react\";\r\n\r\ntype paramTypes = {\r\n  status: boolean;\r\n  message: string;\r\n  email: string;\r\n  token: string;\r\n};\r\nexport default function ResetPassPage({ data }: { data: paramTypes }) {\r\n  return (\r\n    <>{data.status ? <ResetPassComponent data={data} /> : <InvalidLink />} <Toaster richColors position=\"bottom-right\"/></>\r\n  );\r\n}\r\n\r\nconst ResetPassComponent = ({ data }: { data: paramTypes }) => {\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const router = useRouter();\r\n  const sendData = async (formData: FormData) => {\r\n    const password = formData.get(\"reset_pass\") as string;\r\n    const confirm_password = formData.get(\"confirm_reset_pass\") as string;\r\n\r\n    if (password.trim() === confirm_password.trim()) {\r\n      const checkInputPassword = await checkPassword({ password: password });\r\n      if (checkInputPassword.status) {\r\n        await fakeLoad();\r\n        setLoading(true);\r\n        const res = await changePassword({\r\n          password: password,\r\n          email: data.email,\r\n          token: data.token,\r\n        });\r\n  \r\n        if (res.status) {\r\n          toast.success(res.message);\r\n          router.refresh();\r\n          router.push(\"/Auth\");\r\n        } else {\r\n          toast.error(res.message);\r\n        }\r\n      } else {\r\n        toast.error(checkInputPassword.message);\r\n      }\r\n    } else {\r\n      toast.error(\"password did not match\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <>\r\n      <form action={sendData}>\r\n        <Card className=\"w-[90vw] max-w-[450px] shadow-lg rounded-none bg-white dark:bg-gray-900/20\">\r\n          <CardHeader>\r\n            <CardTitle>Change Password</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"flex flex-col gap-4\">\r\n            <Label htmlFor=\"resetpass\">New password</Label>\r\n            <Input\r\n              required\r\n              name=\"reset_pass\"\r\n              id=\"resetpass\"\r\n              type=\"password\"\r\n              className=\" rounded-none\"\r\n            />\r\n            <Label htmlFor=\"confirmresetpass\">Confirm Password</Label>\r\n            <Input\r\n              required\r\n              name=\"confirm_reset_pass\"\r\n              id=\"confirmresetpass\"\r\n              type=\"password\"\r\n              className=\" rounded-none\"\r\n            />\r\n          </CardContent>\r\n          <CardFooter className=\" justify-end\">\r\n            <Button\r\n              disabled={loading}\r\n              type=\"submit\"\r\n              className=\" w-[150px] rounded-none\"\r\n            >\r\n              {loading ? (\r\n                <Loader2 className=\"animate-[spin_0.4s_linear_infinite] w-[27px] h-[27px]\"/>\r\n              ) : (\r\n                \"Save\"\r\n              )}\r\n            </Button>\r\n          </CardFooter>\r\n        </Card>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst InvalidLink = () => {\r\n  return (\r\n    <div className=\"w-full h-screen flex justify-center items-center\">\r\n      <p>Invalid link</p>\r\n    </div>\r\n  );\r\n};\r\nconst fakeLoad = async () => {\r\n  return;\r\n};"],"mappings":";AACA,OAAO;AAEP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,aAAa;AACtB,SAAS,aAAa;AACtB,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAC9B,SAAS,SAAS,aAAa;AAC/B,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,OAAO,WAAW;AAClB,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AAQT,SAAR,cAA+B,EAAE,KAAK,GAAyB;AACpE,SACE,0DAAG,KAAK,SAAS,oCAAC,sBAAmB,MAAY,IAAK,oCAAC,iBAAY,GAAG,KAAC,oCAAC,WAAQ,YAAU,MAAC,UAAS,gBAAc,CAAE;AAExH;AAEA,MAAM,qBAAqB,CAAC,EAAE,KAAK,MAA4B;AAE7D,QAAM,CAAC,SAAS,UAAU,IAAI,SAAkB,KAAK;AACrD,QAAM,SAAS,UAAU;AACzB,QAAM,WAAW,OAAO,aAAuB;AAC7C,UAAM,WAAW,SAAS,IAAI,YAAY;AAC1C,UAAM,mBAAmB,SAAS,IAAI,oBAAoB;AAE1D,QAAI,SAAS,KAAK,MAAM,iBAAiB,KAAK,GAAG;AAC/C,YAAM,qBAAqB,MAAM,cAAc,EAAE,SAAmB,CAAC;AACrE,UAAI,mBAAmB,QAAQ;AAC7B,cAAM,SAAS;AACf,mBAAW,IAAI;AACf,cAAM,MAAM,MAAM,eAAe;AAAA,UAC/B;AAAA,UACA,OAAO,KAAK;AAAA,UACZ,OAAO,KAAK;AAAA,QACd,CAAC;AAED,YAAI,IAAI,QAAQ;AACd,gBAAM,QAAQ,IAAI,OAAO;AACzB,iBAAO,QAAQ;AACf,iBAAO,KAAK,OAAO;AAAA,QACrB,OAAO;AACL,gBAAM,MAAM,IAAI,OAAO;AAAA,QACzB;AAAA,MACF,OAAO;AACL,cAAM,MAAM,mBAAmB,OAAO;AAAA,MACxC;AAAA,IACF,OAAO;AACL,YAAM,MAAM,wBAAwB;AAAA,IACtC;AACA,eAAW,KAAK;AAAA,EAClB;AACA,SACE,0DACE,oCAAC,UAAK,QAAQ,YACZ,oCAAC,QAAK,WAAU,gFACd,oCAAC,kBACC,oCAAC,iBAAU,iBAAe,CAC5B,GACA,oCAAC,eAAY,WAAU,yBACrB,oCAAC,SAAM,SAAQ,eAAY,cAAY,GACvC;AAAA,IAAC;AAAA;AAAA,MACC,UAAQ;AAAA,MACR,MAAK;AAAA,MACL,IAAG;AAAA,MACH,MAAK;AAAA,MACL,WAAU;AAAA;AAAA,EACZ,GACA,oCAAC,SAAM,SAAQ,sBAAmB,kBAAgB,GAClD;AAAA,IAAC;AAAA;AAAA,MACC,UAAQ;AAAA,MACR,MAAK;AAAA,MACL,IAAG;AAAA,MACH,MAAK;AAAA,MACL,WAAU;AAAA;AAAA,EACZ,CACF,GACA,oCAAC,cAAW,WAAU,kBACpB;AAAA,IAAC;AAAA;AAAA,MACC,UAAU;AAAA,MACV,MAAK;AAAA,MACL,WAAU;AAAA;AAAA,IAET,UACC,oCAAC,WAAQ,WAAU,yDAAuD,IAE1E;AAAA,EAEJ,CACF,CACF,CACF,CACF;AAEJ;AAEA,MAAM,cAAc,MAAM;AACxB,SACE,oCAAC,SAAI,WAAU,sDACb,oCAAC,WAAE,cAAY,CACjB;AAEJ;AACA,MAAM,WAAW,YAAY;AAC3B;AACF;","names":[]}