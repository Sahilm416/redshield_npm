{"version":3,"sources":["../../../src/components/LoginCard.tsx"],"sourcesContent":["\"use client\";\r\nimport { LoginUser } from \"../actions/login\";\r\nimport { Button } from \"./ui/button\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardFooter,\r\n  CardContent,\r\n} from \"./ui/card\";\r\n\r\nimport { Input } from \"./ui/input\";\r\nimport { Label } from \"./ui/label\";\r\nimport React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { Loader2 } from \"lucide-react\"\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { sendResetPasswordLink } from \"../actions/forgotPassword\";\r\n\r\nexport default function LoginCard({ project_name , project_id }: { project_name: string , project_id: string}) {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [forgotPassword, setForgotPassword] = useState<boolean>(false);\r\n\r\n  const router = useRouter();\r\n  const sendData = async (formData: FormData) => {\r\n    const email = formData.get(\"email\") as string;\r\n    const password = formData.get(\"password\") as string;\r\n    await fakeLoad();\r\n    setLoading(true);\r\n    const res = await LoginUser({ email: email, password: password , project_id: project_id });\r\n    if (res.status) {\r\n      toast.success(res.message);\r\n      router.refresh();\r\n    } else {\r\n      toast.error(res.message);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <>\r\n      {forgotPassword ? (\r\n        <ForgotPasswordComponent setForgotPassword={setForgotPassword} />\r\n      ) : (\r\n        <Card className=\" dark:bg-gray-900/20 bg-white p-2 shadow-lg rounded-md border-[#EBEBEB] dark:border-[#1F1F1F]\">\r\n          <form action={sendData}>\r\n            <CardHeader>\r\n              <CardTitle>Login to {project_name}</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"flex flex-col gap-3\">\r\n              <Label htmlFor=\"email\">Email</Label>\r\n              <Input\r\n                className=\"border-[#EBEBEB] dark:border-[#1F1F1F] rounded-sm\"\r\n                autoFocus\r\n                placeholder=\"enter email\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                required\r\n              />\r\n              <Label htmlFor=\"password\">Password</Label>\r\n              <Input\r\n                className=\"border-[#EBEBEB] dark:border-[#1F1F1F] rounded-sm\"\r\n                placeholder=\"enter password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                required\r\n              />\r\n            </CardContent>\r\n            <CardFooter className=\"flex-col gap-2 pb-2\">\r\n              <Button\r\n                disabled={loading}\r\n                className=\"w-full rounded-sm\"\r\n                type=\"submit\"\r\n              >\r\n                {loading ? (\r\n                  <Loader2 className=\"animate-[spin_0.4s_linear_infinite] w-[27px] h-[27px] origin-center \"/>\r\n                ) : (\r\n                  \"login\"\r\n                )}\r\n              </Button>\r\n              <Button onClick={() => setForgotPassword(true)} variant={\"link\"}>\r\n                forgot password\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ForgotPasswordComponent({\r\n  setForgotPassword,\r\n}: {\r\n  setForgotPassword: Dispatch<SetStateAction<boolean>>;\r\n}) {\r\n  const [resetPassLoading, setResetPassLoading] = useState<boolean>(false);\r\n  const resetPassRequest = async (formData: FormData) => {\r\n    const email = formData.get(\"email\") as string;\r\n    //get current url for reset password endpoint\r\n    const url = window.location.toString().split(\"/Auth\")[0] as string;\r\n    await fakeLoad();\r\n    setResetPassLoading(true);\r\n    const res = await sendResetPasswordLink({ email: email , url: url });\r\n    if (res.status) {\r\n      toast.success(res.message);\r\n    } else {\r\n      toast.error(res.message);\r\n    }\r\n    setResetPassLoading(false);\r\n  };\r\n  return (\r\n    <form action={resetPassRequest}>\r\n      <Card className=\" rounded-md\">\r\n        <CardHeader>\r\n          <CardTitle>Reset Password</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex flex-col gap-5\">\r\n          <Label htmlFor=\"forgotPassEmail\">Email</Label>\r\n          <Input\r\n            name=\"email\"\r\n            placeholder=\"enter your email address\"\r\n            required\r\n            autoFocus\r\n            className=\" rounded-sm\"\r\n            id=\"forgotPassEmail\"\r\n            type=\"email\"\r\n          />\r\n        </CardContent>\r\n        <CardFooter className=\"gap-3\">\r\n          <Button\r\n            onClick={() => setForgotPassword(false)}\r\n            variant={\"outline\"}\r\n            className=\"w-full rounded-sm\"\r\n          >\r\n            Back\r\n          </Button>\r\n          <Button className=\" rounded-sm w-full\">\r\n            {resetPassLoading ? (\r\n              <Loader2 className=\"animate-[spin_0.4s_linear_infinite] w-[27px] h-[27px]\"/>\r\n            ) : (\r\n              \"Send link\"\r\n            )}\r\n          </Button>\r\n        </CardFooter>\r\n      </Card>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst fakeLoad = async () => {\r\n  return;\r\n};"],"mappings":"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","names":[]}